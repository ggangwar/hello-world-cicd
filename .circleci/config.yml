version: 2.1
orbs:
  welcome: circleci/welcome-orb@0.4.1
commands:
  print_pipeline_id:
    parameters:
      id:
        default: '123'
        type: string
    steps:
      - run: 'echo "<<parameters.id>>" ${CIRCLE_WORKFLOW_ID}'
  destroy_infra:
    steps:
      - run:
          name: destroy CF infra
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}
jobs:
  print_hello_world:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - run: echo helloworld
  print_owner:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - run:
          name: printing project's owner
          command: |
            echo $owner
  save_hello_world_output:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - run: echo "Hello world" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
  print_output_file:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt
  print_pipeline_id_command:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - print_pipeline_id:
          id: << pipeline.id >>
  handle_failure:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - run: return 0
      - run:
          name: on error
          command: |
            echo "something failed"
          when: on_fail
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file infra.yml \
              --stack-name prod-${CIRCLE_WORKFLOW_ID}
  configure_infra:
    docker:
      - image: 'python:3.7-alpine3.11'
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '13:59:17:ea:a4:c6:3a:95:0e:25:22:6f:9a:2e:c9:18'
      - run:
          name: install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory playbook.yml
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
            name: smoke test.
            command: |
              URL="https://blog.udacity.com/"
              if curl -s --head ${URL} # test if blog.udacity. com exists
              then
               return 0
              else
               return 1
              fi
  smoke_test_cf_infra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - destroy_infra
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run: |
          aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name "cicd-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides NAME="cicd-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws s3 sync . s3://"cicd-${CIRCLE_WORKFLOW_ID:0:7}" --delete
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run: | 
          aws cloudformation list-exports --query "Exports[?Name==\`PipelineID\`].Value" --no-paginate --output text > ~/lastDeployId.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - lastDeployId.txt
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          aws cloudformation deploy --template-file cloudfront.yml --stack-name production-distro --parameter-overrides PipelineID="cicd-${CIRCLE_WORKFLOW_ID:0:7}"
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run: PreviousPipelineID = `cat ~/lastDeployId.txt`
      - run: |
          aws s3 rm "s3://${PreviousPipelineID}" --recursive
          aws cloudformation delete-stack --stack-name "${PreviousPipelineID}"

workflows:
  welcome:
    jobs:
      - welcome/run
      #- print_hello_world
      #- print_owner
      #- save_hello_world_output
      #- print_output_file:
      #   requires:
      #     - save_hello_world_output
      #- print_pipeline_id_command
      #- create_infrastructure
      #- configure_infra
      #- smoke_test
      #- smoke_test_cf_infra:
      #    requires:
      #     - create_infrastructure
      - get_last_deployment_id
      - create_and_deploy_front_end:
          requires:
            - get_last_deployment_id
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - clean_up_old_front_end:
          requires:
            - promote_to_production